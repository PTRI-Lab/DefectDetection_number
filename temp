#0901
import cv2
import numpy as np
from paddleocr import PaddleOCR
import re
import time
from collections import Counter

# ----------------------------
# ÂàùÂßãÂåñ PaddleOCR
# ----------------------------
ocr_reader = PaddleOCR(
    use_textline_orientation=True,
    lang="en",
    text_detection_model_name="PP-OCRv5_mobile_det",
    text_recognition_model_name="PP-OCRv5_mobile_rec",
    text_detection_model_dir=r".\PP-OCRv5_mobile_det",
    text_recognition_model_dir=r".\PP-OCRv5_mobile_rec",
)

conf_threshold = 0.5
pattern = re.compile(r'[A-Za-z0-9]+')

# ----------------------------
# ÂΩ±ÁâáËÆÄÂèñ
# ----------------------------
video_path = r".\static\wrong.mp4"
cap = cv2.VideoCapture(video_path)
if not cap.isOpened():
    print("‚ùå Cannot open video")
    exit()

frame_count = 0
start_time = time.time()

# OCR ÊéßÂà∂
last_ocr_time = 0
ocr_interval = 1.0  # ÊØèÁßíËæ®Ë≠ò‰∏ÄÊ¨°

# Á¥ØÁ©çÁµêÊûú
text_counter = Counter()

# ‰∏ä‰∏ÄÂºµÁ¥ôÁöÑ‰ΩçÁΩÆ
prev_rect = None
new_page_threshold = 50  # Âà§Êñ∑Êñ∞Á¥ôÁöÑÂ∑ÆÁï∞ÈñÄÊ™ª

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_count += 1
    elapsed_time = time.time() - start_time
    fps = frame_count / elapsed_time if elapsed_time > 0 else 0

    # ÊâæÊúÄÂ§ßÁü©ÂΩ¢
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blur, 50, 150)
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    max_area = 0
    best_rect = None
    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)
        if len(approx) == 4:
            area = cv2.contourArea(approx)
            if area > 5000:
                rect = cv2.boundingRect(approx)
                aspect_ratio = rect[2] / rect[3]
                if 0.3 < aspect_ratio < 3.0:
                    if area > max_area:
                        max_area = area
                        best_rect = rect

    if best_rect is not None:
        x, y, w, h = best_rect
        roi = frame[y:y+h, x:x+w]

        # --- Âà§Êñ∑ÊòØÂê¶Êñ∞ÁöÑ‰∏ÄÂºµÁ¥ô ---
        if prev_rect is not None:
            diff = sum(abs(a - b) for a, b in zip(best_rect, prev_rect))
            if diff > new_page_threshold:
                text_counter = Counter()  # Ê≠∏Èõ∂
                print("üìÑ New page detected, reset counter")
        prev_rect = best_rect

        # --- ROI ÊóãËΩâ90Â∫¶ ---
        roi_rotated = cv2.rotate(roi, cv2.ROTATE_90_CLOCKWISE)

        # --- ÊØèÁßí OCR ‰∏ÄÊ¨° ---
        ocr_results = []
        if time.time() - last_ocr_time > ocr_interval:
            last_ocr_time = time.time()
            results = ocr_reader.predict(roi_rotated)

            for page in results:
                rec_texts = page.get('rec_texts', [])
                rec_scores = page.get('rec_scores', [])
                rec_boxes = page.get('rec_boxes', [])
                for text, score, box in zip(rec_texts, rec_scores, rec_boxes):
                    if score >= conf_threshold:
                        clean_text = re.sub(r'[^A-Za-z0-9]', '', text)
                        if clean_text:
                            text_counter[clean_text] += 1
                            ocr_results.append((box, clean_text, score))

        # --- ROI Ë¶ñÁ™óÈ°ØÁ§∫ OCR ÁµêÊûú ---
        roi_display = roi_rotated.copy()
        for box, text, score in ocr_results:
            pts = np.array(box).reshape(-1,1,2).astype(int)
            cv2.putText(roi_display, f"{text} ({score:.2f})",
                        (pts[0][0][0], pts[0][0][1] - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,255,0), 2)

        cv2.imshow("ROI + OCR Compare", roi_display)

        # --- Top3 È°ØÁ§∫Âú® Frame ---
        top3 = text_counter.most_common(3)
        y0 = 30
        for i, (word, count) in enumerate(top3):
            y = y0 + i * 30
            cv2.putText(frame, f"{word}: {count}", (10, y),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

    # È°ØÁ§∫ FPS Ëàá Frame Êï∏
    cv2.putText(frame, f"Frame: {frame_count}", (10, 120),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
    cv2.putText(frame, f"FPS: {fps:.2f}", (10, 150),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

    cv2.imshow("Frame", frame)

    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()


